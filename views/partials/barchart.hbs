<section class="chart-section">
    <h3 style="    border-bottom: 1px solid #dfdfdf;
    padding-bottom: 10px;
    color: #fff;
    background: #010733;
    padding-top: 10px;">{{keyword}} Market Size, {{Current_Year}} To {{Forecast_Year}} (USD {{mb}})</h3>
    <div id="barchart" style="width: 100%;height: auto;text-align:center;margin-top:50px;" class="overflow"></div>
    {{#if_contains Revenue_Current 'XX'}}
    <i class="fa fa-lock big-lock"></i>
    <style>
        #barchart {
            filter: blur(4px);
        }

        .big-lock {
            color: blue;
            font-size: 200px;
            position: absolute;
            top: 400px;
            right: 550px;
        }
    </style>
    {{/if_contains}}
</section>
{{#if_not_eq slug ''}}
<div class="text-center">
    <a class="btn btn-primary" target="_blank" style="color: blue !important;" href="/{{slug}}/request-sample">To Get
        Free Sample and
        Offer On the Research Study</a>
</div>
{{/if_not_eq}}
<!-- load in D3 and Chart constructor scripts -->

<style>
    .text-center {
        text-align: center;
        margin-bottom: 10px;
    }

    .chart-title {
        font-size: 20px;
        font-weight: bold;
    }

    section.chart-section {
        margin-top: 20px;
        margin-bottom: 20px;
        border: 1px solid #010733;
    }

    section.chart-section h3 {
        text-align: center;
    }

    @media (max-width: 400px) {
        text {
            font-size: 10px;
        }
    }
</style>

<script>
    (function () {

        var revenue2021 = parseFloat('{{Revenue_Current}}'.replace(/\,/gmi, '').replace(/USD/gmi, '')
            .replace(/Billion/gmi, '')
            .replace(/Million/gmi, '')
            .replace(/Trillion/gmi, '')
            .replace(/Bn/gmi, '')
            .replace(/mn/gmi, '')
            .replace(/tr/gmi, ''));

        var MorB = '{{Revenue_Current}}'.replace(/usd/gmi, '').replace(/$/gmi, '').replace(new RegExp(revenue2021, 'gmi'), '').trim();

        let chartTitle = `{{keyword}} Market Size, {{Base_Year}} To {{Forecast_Year}} (USD ${MorB})`;
        var revenue2028 = parseFloat('{{Revenue_Forecast}}'.replace(/USD/gmi, '').replace(/Billion/gmi, ''));

        var cagr = parseFloat('{{CAGR_Revenue}}'.replace(/%/gmi, ''));


        let data = [];
        let labelArrayLength = parseInt('{{Forecast_Year}}') - parseInt('{{Base_Year}}') + 1;

        const labels = Array.from({ length: labelArrayLength }, (_, i) => i + parseInt('{{Base_Year}}'));

        for (var i = 0; i < labels.length; i++) {
            if (data.length > 0) {
                data.push((data[i - 1] * (cagr / 100)) + data[i - 1]);
            } else {
                data.push(revenue2021);
            }
        }

        //data[data.length - 1] = revenue2028;

        //data[data.length - 2] = data[data.length - 1] - (data[data.length - 1] * cagr / 100);

        // maximum width of single bar so bar doesn't look like a box
        const max_bar_width = 100;

        // maximum height of the svg element
        // this will include top and bottom offset
        const svg_height = 400;

        // bg color of bars
        const bar_color = "#4682b4";

        // top and bottom margins
        const top_offset = 50;
        const bottom_offset = 50;

        /**
         * Darked/Lighten a color
         * Copied from https://stackoverflow.com/a/13532993/10468888
         */
        function shadeColor(color, percent) {

            var R = parseInt(color.substring(1, 3), 16);
            var G = parseInt(color.substring(3, 5), 16);
            var B = parseInt(color.substring(5, 7), 16);

            R = parseInt(R * (100 + percent) / 100);
            G = parseInt(G * (100 + percent) / 100);
            B = parseInt(B * (100 + percent) / 100);

            R = (R < 255) ? R : 255;
            G = (G < 255) ? G : 255;
            B = (B < 255) ? B : 255;

            var RR = ((R.toString(16).length == 1) ? "0" + R.toString(16) : R.toString(16));
            var GG = ((G.toString(16).length == 1) ? "0" + G.toString(16) : G.toString(16));
            var BB = ((B.toString(16).length == 1) ? "0" + B.toString(16) : B.toString(16));

            return "#" + RR + GG + BB;
        }

        // append svg
        const svg = d3.select("#barchart")
            .append("svg")
            .attr("width", '100%')
            .attr("height", svg_height);

        // to make graph responsive calcuate we set width 100%
        // here we calculate width in pixels
        const svg_width = svg.node().getBoundingClientRect().width;

        // decide bar width depending upon available space and no. of bars to plot
        let bar_width = Math.round((svg_width - 60) / data.length);
        if (bar_width > max_bar_width) {
            bar_width = max_bar_width;
        }

        // spacing between two bars
        // instead of having a fixed value we set it dynamically
        const spacing = 0.15 * bar_width;

        // to center align graph we move it from left to right
        // this is applicable if there's any space left
        let left_offset = Math.round((svg_width - bar_width * data.length) / 2);
        if (left_offset < 0) {
            left_offset = 0;
        }

        // create scale
        const scale = d3.scaleLinear()
            .domain([0, Math.max(...data)])
            .range([0, svg_height - top_offset - bottom_offset]);

        // create scale for Y-Axis
        // we could have used scale above but for Y-Axis we need domain reversed
        const scale_y_axis = d3.scaleLinear()
            .domain([Math.max(...data), 0])
            .range([0, svg_height - top_offset - bottom_offset]);

        // create tooltip element  
        const tooltip = d3.select("body")
            .append("div")
            .attr("class", "d3-tooltip")
            .style("position", "absolute")
            .style("z-index", "10")
            .style("visibility", "hidden")
            .style("padding", "15px")
            .style("background", "rgba(0,0,0,0.6)")
            .style("border-radius", "5px")
            .style("color", "#fff")
            .text("a simple tooltip");

        let showOnly = labels.length < 9 ? [0, 3, 4, 7] : [0, 3, 4, labels.length - 1];


        //shadow
        var defs = svg.append("defs");

        var filter = defs.append("filter")
            .attr("id", "dropshadow")

        filter.append("feGaussianBlur")
            .attr("in", "SourceAlpha")
            .attr("stdDeviation", 4)
            .attr("result", "blur");
        filter.append("feOffset")
            .attr("in", "blur")
            .attr("dx", 2)
            .attr("dy", 2)
            .attr("result", "offsetBlur");

        var feMerge = filter.append("feMerge");

        feMerge.append("feMergeNode")
            .attr("in", "offsetBlur")
        feMerge.append("feMergeNode")
            .attr("in", "SourceGraphic");
        //end shadow


        // append rect
        const rect = svg.selectAll("g")
            .data(data)
            .enter()
            .append("rect")
            .attr("fill", bar_color)
            .attr("x", (d, i) => left_offset + bar_width * i)
            .attr("y", d => svg_height - bottom_offset)
            .attr("width", bar_width - spacing)
            .attr('class', 'bar')
            .attr('filter', 'url(#dropshadow)')
            .on("mouseover", function (d, i) {
                if (showOnly.indexOf(i) > -1) {
                    if (i == data.length - 1) {
                        tooltip.html(`${parseFloat(revenue2028).toFixed(2)} ${MorB}`).style("visibility", "visible");
                    } else {
                        tooltip.html(`${parseFloat(d).toFixed(1)} ${MorB}`).style("visibility", "visible");
                    }
                }
                d3.select(this)
                    .attr("fill", shadeColor(bar_color, -15));
            })
            .on("mousemove", function () {
                tooltip
                    .style("top", (event.pageY - 10) + "px")
                    .style("left", (event.pageX + 10) + "px");
            })
            .on("mouseout", function () {
                tooltip.html(``).style("visibility", "hidden");
                d3.select(this).attr("fill", bar_color);
            });

        // append text  
        svg.selectAll("g")
            .data(data)
            .enter()
            .append("text")
            .attr("dominant-baseline", "text-before-edge")
            .attr("text-anchor", "middle")
            .attr("fill", "#000000")
            .attr("x", (d, i) => left_offset + bar_width * i + bar_width / 2 - spacing / 2)
            .attr("y", svg_height - bottom_offset + 5)
            .attr("style", "font-family:Verdana")
            .text((d, i) => labels[i]);

        // append X-Axis  
        svg.append("line")
            .attr("stroke", "#000000")
            .attr("stroke-width", 2)
            .attr("x1", left_offset)
            .attr("y1", svg_height - bottom_offset)
            .attr("x2", bar_width * data.length + left_offset - spacing)
            .attr("y2", svg_height - bottom_offset);

        svg.append("line")
            .attr("stroke", "#000")
            .attr("stroke-width", 2)
            .attr("x1", 950)
            .attr("y1", 20)
            .attr("x2", 350)
            .attr("y2", 20);

        svg.append("line")
            .attr("stroke", "#000")
            .attr("stroke-width", 2)
            .attr("x1", 950)
            .attr("y1", 20)
            .attr("x2", 950)
            .attr("y2", 30);

        svg.append("line")
            .attr("stroke", "#000")
            .attr("stroke-width", 2)
            .attr("x1", 350)
            .attr("y1", 20)
            .attr("x2", 350)
            .attr("y2", 30);

        svg.append('text')
            .attr("fill", "#000000")
            .attr('x', 630)
            .attr('y', 15).text('CAGR: ' + cagr + '%');


        // appen Y-Axis        
        /*svg.append("g")
            .attr("transform", "translate(0," + top_offset + ")")
            .call(d3.axisRight(scale_y_axis));*/


        //svg.append('text').attr('x', '150').attr('y', '50').attr('class', 'chart-title').text(chartTitle);

        //svg.append('text').attr('x', '100').attr('y', '100').text(`Values in ${MorB}`);


        svg.selectAll('g').data(data).enter().append('text').attr('x', (d, i) => {
            return left_offset + bar_width * i + bar_width / 2 - spacing / 2;
        }).attr('y', (d, i) => {
            return svg_height - 55 - scale(d);
        }).text((d, i) => {
            if (showOnly.indexOf(i) > -1) {
                if (i == data.length - 1) {
                    return parseFloat(revenue2028).toFixed(2);
                } else {
                    return parseFloat(d).toFixed(2);
                }
            } else {
                return '';
            }
        });

        window.onscroll = () => {
            // set animation
            rect.transition()
                .ease(d3.easeLinear)
                .duration(1000)
                .attr("y", d => svg_height - bottom_offset - scale(d))
                .attr("height", d => scale(d));
        };
    })();
</script>